<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.sang.mapper.EmpMapper">

    <insert id="addEmp" parameterType="org.sang.bean.Employee">
        insert into employee (name, highSea, customerId, province,
        city, county, industry, address,
        phone, email, website, remark,
        businessReceipt, businessScope, registerCapital, corporateNature, propertyValue,
        oldName, employeeNum, products, propertyType,
        giov, creator, relevantP, relevantPAccount,
        creatorAccount, chargePAccount, chargeP
        )
        values (#{name,jdbcType=VARCHAR}, #{highSea,jdbcType=VARCHAR}, #{customerId,jdbcType=VARCHAR}, #{province,jdbcType=VARCHAR},
        #{city,jdbcType=VARCHAR}, #{county,jdbcType=VARCHAR}, #{industry,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR},
        #{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{website,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR},
        #{businessReceipt,jdbcType=VARCHAR}, #{businessScope,jdbcType=VARCHAR}, #{registerCapital,jdbcType=VARCHAR},#{corporateNature,jdbcType=VARCHAR}, #{propertyValue,jdbcType=INTEGER},
        #{oldName,jdbcType=VARCHAR}, #{employeeNum,jdbcType=VARCHAR}, #{products,jdbcType=VARCHAR}, #{propertyType,jdbcType=VARCHAR},
        #{giov,jdbcType=VARCHAR}, #{creator,jdbcType=VARCHAR}, #{relevantP,jdbcType=VARCHAR}, #{relevantPAccount,jdbcType=VARCHAR},
        #{creatorAccount,jdbcType=VARCHAR}, #{chargePAccount,jdbcType=VARCHAR}, #{chargeP,jdbcType=VARCHAR}
        )
    </insert>

    <resultMap id="BaseResultMap" type="org.sang.bean.Employee">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="highSea" property="highSea"/>
        <result column="province" property="province"/>
        <result column="city" property="city"/>
        <result column="county" property="county"/>
        <result column="website" property="website"/>
        <result column="remark" property="remark"/>
        <result column="businessReceipt" property="businessReceipt"/>
        <result column="businessScope" property="businessScope"/>
        <result column="propertyValue" property="propertyValue"/>
        <result column="employeeNum" property="employeeNum"/>
        <result column="products" property="products"/>
        <result column="propertyType" property="propertyType"/>
        <result column="email" property="email"/>
        <result column="phone" property="phone"/>
        <result column="address" property="address"/>
        <result column="industry" property="industry"/>
        <result column="registerCapital" property="registerCapital"/>
        <result column="corporateNature" property="corporateNature"/>
        <result column="customerId" property="customerId"/>
        <result column="oldName" property="oldName"/>

        <result column="giov" property="giov"/>
        <result column="creator" property="creator"/>
        <result column="relevantP" property="relevantP"/>
        <result column="relevantPAccount" property="relevantPAccount"/>
        <result column="creatorAccount" property="creatorAccount"/>
        <result column="chargePAccount" property="chargePAccount"/>
        <result column="chargeP" property="chargeP"/>
    </resultMap>

    <select id="getEmployeeByPage" resultMap="BaseResultMap">
        <!--        select e.*, jl.`id` as jlid,jl.`name` as jlname,jl.`titleLevel` as jlTitleLevel,d.`id` as did,d.`name` as-->
        <!--        dname, p.`id` as pid,p.`name` as pname-->
        <!--        from employee e, joblevel jl, department d, position p-->
        <!--        where e.`posId`=p.`id` and e.`jobLevelId`=jl.`id` and e.`departmentId`=d.id-->
        <!--        and e.`name` like concat('%',#{keywords},'%')-->
        select e.*
        from employee e
        where e.`name` like concat('%',#{keywords},'%')
        <if test="propertyValueMin!=null and propertyValueMax!=null">
            AND e.propertyValue BETWEEN #{propertyValueMin} AND #{propertyValueMax}
        </if>
        <!--        分页-->
        <if test="start!=null and size!=null">
            order by e.id limit #{start},#{size}
        </if>
    </select>
    <select id="getCountByKeywords" resultType="Long">
        SELECT count(*) FROM employee e WHERE e.name LIKE concat('%',#{keywords},'%')
    </select>
    <update id="updateEmp">
        update employee
        <set>
            <if test="emp.name != null">
                name = #{emp.name,jdbcType=VARCHAR},
            </if>
            <if test="emp.highSea != null">
                highSea = #{emp.highSea,jdbcType=VARCHAR},
            </if>
            <if test="emp.province != null">
                province = #{emp.province,jdbcType=VARCHAR},
            </if>
            <if test="emp.city != null">
                city = #{emp.city,jdbcType=VARCHAR},
            </if>
            <if test="emp.county != null">
                county = #{emp.county,jdbcType=VARCHAR},
            </if>
            <if test="emp.website != null">
                website = #{emp.website,jdbcType=VARCHAR},
            </if>
            <if test="emp.remark != null">
                remark = #{emp.remark,jdbcType=VARCHAR},
            </if>
            <if test="emp.businessReceipt != null">
                businessReceipt = #{emp.businessReceipt,jdbcType=VARCHAR},
            </if>
            <if test="emp.businessScope != null">
                businessScope = #{emp.businessScope,jdbcType=VARCHAR},
            </if>
            <if test="emp.propertyValue != null">
                propertyValue = #{emp.propertyValue,jdbcType=INTEGER},
            </if>
            <if test="emp.employeeNum != null">
                employeeNum = #{emp.employeeNum,jdbcType=VARCHAR},
            </if>
            <if test="emp.products != null">
                products = #{emp.products,jdbcType=VARCHAR},
            </if>
            <if test="emp.propertyType != null">
                propertyType = #{emp.propertyType,jdbcType=VARCHAR},
            </if>
            <if test="emp.email != null">
                email = #{emp.email,jdbcType=VARCHAR},
            </if>
            <if test="emp.phone != null">
                phone = #{emp.phone,jdbcType=VARCHAR},
            </if>
            <if test="emp.address != null">
                address = #{emp.address,jdbcType=VARCHAR},
            </if>
            <if test="emp.industry != null">
                industry = #{emp.industry,jdbcType=CHAR},
            </if>
            <if test="emp.customerId != null">
                customerId = #{emp.customerId,jdbcType=CHAR},
            </if>
            <if test="emp.registerCapital != null">
                registerCapital = #{emp.registerCapital,jdbcType=CHAR},
            </if>
            <if test="emp.corporateNature != null">
                corporateNature = #{emp.corporateNature,jdbcType=CHAR},
            </if>


            <if test="emp.oldName != null">
                oldName = #{emp.oldName,jdbcType=CHAR},
            </if>

            <if test="emp.giov != null">
                giov = #{emp.giov,jdbcType=CHAR},
            </if>
            <if test="emp.creator != null">
                creator = #{emp.creator,jdbcType=CHAR},
            </if>
            <if test="emp.relevantP != null">
                relevantP = #{emp.relevantP,jdbcType=CHAR},
            </if>
            <if test="emp.relevantPAccount != null">
                relevantPAccount = #{emp.relevantPAccount,jdbcType=CHAR},
            </if>
            <if test="emp.creatorAccount != null">
                creatorAccount = #{emp.creatorAccount,jdbcType=CHAR},
            </if>
            <if test="emp.chargePAccount != null">
                chargePAccount = #{emp.chargePAccount,jdbcType=CHAR},
            </if>
            <if test="emp.chargeP != null">
                chargeP = #{emp.chargeP,jdbcType=CHAR},
            </if>


        </set>
        where id = #{emp.id,jdbcType=BIGINT}
    </update>

    <delete id="deleteEmpById">
        DELETE FROM employee WHERE id IN
        <foreach collection="ids" separator="," open="(" close=")" item="id">
            #{id}
        </foreach>
    </delete>

    <insert id="addEmps">
        insert into employee (name, highSea, customerId, province,
        city, county, industry, address,
        phone, email, website, remark,
        businessReceipt, businessScope, registerCapital, corporateNature, propertyValue,
        oldName, employeeNum, products, propertyType,
        giov, creator, relevantP, relevantPAccount,
        creatorAccount, chargePAccount, chargeP
        )
        values
        <foreach collection="emps" item="emp" separator=",">
            (#{emp.name,jdbcType=VARCHAR}, #{emp.highSea,jdbcType=VARCHAR}, #{emp.customerId,jdbcType=VARCHAR}, #{emp.province,jdbcType=VARCHAR},
            #{emp.city,jdbcType=VARCHAR}, #{emp.county,jdbcType=VARCHAR}, #{emp.industry,jdbcType=VARCHAR}, #{emp.address,jdbcType=VARCHAR},
            #{emp.phone,jdbcType=VARCHAR}, #{emp.email,jdbcType=VARCHAR}, #{emp.website,jdbcType=VARCHAR}, #{emp.remark,jdbcType=VARCHAR},
            #{emp.businessReceipt,jdbcType=VARCHAR}, #{emp.businessScope,jdbcType=VARCHAR}, #{emp.registerCapital,jdbcType=VARCHAR},#{emp.corporateNature,jdbcType=VARCHAR}, #{emp.propertyValue,jdbcType=INTEGER},
            #{emp.oldName,jdbcType=VARCHAR}, #{emp.employeeNum,jdbcType=VARCHAR}, #{emp.products,jdbcType=VARCHAR}, #{emp.propertyType,jdbcType=VARCHAR},
            #{emp.giov,jdbcType=VARCHAR}, #{emp.creator,jdbcType=VARCHAR}, #{emp.relevantP,jdbcType=VARCHAR}, #{emp.relevantPAccount,jdbcType=VARCHAR},
            #{emp.creatorAccount,jdbcType=VARCHAR}, #{emp.chargePAccount,jdbcType=VARCHAR}, #{emp.chargeP,jdbcType=VARCHAR}
            )
<!--            (#{emp.name,jdbcType=VARCHAR}, #{emp.highSea,jdbcType=VARCHAR}, #{emp.customerId,jdbcType=VARCHAR}, #{emp.province,jdbcType=VARCHAR},-->
<!--            #{emp.city,jdbcType=VARCHAR}, #{emp.county,jdbcType=VARCHAR}, #{emp.industry,jdbcType=VARCHAR}, #{emp.address,jdbcType=VARCHAR},-->
<!--            #{emp.phone,jdbcType=VARCHAR}, #{emp.email,jdbcType=VARCHAR}, #{emp.website,jdbcType=VARCHAR}, #{emp.remark,jdbcType=VARCHAR},-->
<!--            #{emp.businessReceipt,jdbcType=VARCHAR}, #{emp.businessScope,jdbcType=VARCHAR}, #{emp.registerCapital,jdbcType=VARCHAR}, #{emp.corporateNature,jdbcType=VARCHAR}, #{emp.propertyValue,jdbcType=INTEGER},-->
<!--            #{emp.oldName,jdbcType=VARCHAR}, #{emp.employeeNum,jdbcType=VARCHAR}, #{emp.products,jdbcType=VARCHAR}, #{emp.propertyType,jdbcType=VARCHAR},-->
<!--            #{emp.giov,jdbcType=VARCHAR}, #{emp.creator,jdbcType=VARCHAR}, #{emp.relevantP,jdbcType=VARCHAR}, #{emp.relevantPAccount,jdbcType=VARCHAR},-->
<!--            #{emp.creatorAccount,jdbcType=VARCHAR}, #{emp.hargePAccount,jdbcType=VARCHAR}, #{emp.chargeP,jdbcType=VARCHAR}-->
<!--            )-->
        </foreach>
    </insert>

    <!--    <select id="getEmployeeByPageShort" resultMap="BaseResultMap">-->
    <!--select e.*,d.`id` as did,d.`name` as dname,s.`id` as sid,s.`accumulationFundBase`,s.`accumulationFundPer`,s.`allSalary`,s.`basicSalary`,s.`bonus`,s.`createDate`,s.`lunchSalary`,s.`medicalBase`,s.`medicalPer`,s.`name` as sname,s.`pensionBase`,s.`pensionPer`,s.`trafficSalary`-->
    <!--        from employee e left join department d on e.`departmentId`=d.id left join empsalary es on es.`eid`=e.`id` left join salary s on s.`id`=es.`sid`-->
    <!--        ORDER BY e.id limit #{start},#{size}-->
    <!--    </select>-->

</mapper>